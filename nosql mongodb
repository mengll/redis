1.1:主键为32的商品
 db.goods.find({goods_id:32});

1.2:不属第3栏目的所有商品($ne)
 db.goods.find({cat_id:{$ne:3}},{goods_id:1,cat_id:1,goods_name:1});

1.3:本店价格高于3000元的商品{$gt}
 db.goods.find({shop_price:{$gt:3000}},{goods_name:1,shop_price:1});

1.4:本店价格低于或等于100元的商品($lte)
 db.goods.find({shop_price:{$lte:100}},{goods_name:1,shop_price:1});

1.5:取出第4栏目或第11栏目的商品($in)
 db.goods.find({cat_id:{$in:[4,11]}},{goods_name:1,shop_price:1});


1.6:取出100<=价格<=500的商品($and)
db.goods.find({$and:[{price:{$gt:100},{$price:{$lt:500}}}]);


1.7:取出不属于第3栏目且不属于第11栏目的商品($and $nin和$nor分别实现)
 db.goods.find({$and:[{cat_id:{$ne:3}},{cat_id:{$ne:11}}]},{goods_name:1,cat_id:1})
 db.goods.find({cat_id:{$nin:[3,11]}},{goods_name:1,cat_id:1});
 db.goods.find({$nor:[{cat_id:3},{cat_id:11}]},{goods_name:1,cat_id:1});


1.8:取出价格大于100且小于300,或者大于4000且小于5000的商品()
db.goods.find({$or:[{$and:[{shop_price:{$gt:100}},{shop_price:{$lt:300}}]},{$and:[{shop_price:{$gt:4000}},{shop_price:{$lt:5000}}]}]},{goods_name:1,shop_price:1});



1.9:取出goods_id%5 == 1, 即,1,6,11,..这样的商品
db.goods.find({goods_id:{$mod:[5,1]}});


1.10:取出有age属性的文档
db.stu.find({age:{$exists:1}});
含有age属性的文档将会被查出

1.11 修改单元
db.goods.update({查询条件},{$set:{},$unset:{}})

$set
用来指定一个键并更新键值，若键不存在并创建。
{ $set : { field : value } }

$unset
用来删除一个键。
{ $unset : { field : 1} }

$inc
$inc可以对文档的某个值为数字型（只能为满足要求的数字）的键进行增减的操作。
{ $inc : { field : value } }

$push
用法：{ $push : { field : value } }

把value追加到field里面去，field一定要是数组类型才行，如果field不存在，会新增一个数组类型加进去。
$pushAll
同$push,只是一次可以追加多个值到一个数组字段内。
{ $pushAll : { field : value_array } }

$pull
从数组field内删除一个等于value值。

{ $pull : { field : _value } }

$rename
修改字段名称
{ $rename : { old_field_name : new_field_name } }


#查询每个栏目下的商品数量
{
key:{cat_id:1},
cond:{},
reduce:function(curr,result) {
    result.cnt += 1;
},
initial:{cnt:0}
}


#查询每个栏目下价格高于50元的商品数量
{
key:{cat_id:1},
cond:{shop_price:{$gt:50}},
reduce:function(curr,result) {
    result.cnt += 1;
},
initial:{cnt:0}
}



#每个栏目下的商品库存量 sum()操作
{
key:{cat_id:1},
cond:{},
reduce:function(curr,result) {
    result.num += curr.goods_number;
},
initial:{num:0}
}


#查询每个栏目最贵的商品价格, max()操作
{
key:{cat_id:1},
cond:{},
reduce:function(curr , result) {
    if(curr.shop_price > result.max) {
        result.max = curr.shop_price;
    }
},
initial:{max:0}
}


#同上,查询每个栏目下最便宜的商品价格,同学们自行完成



#查询每个栏目下商品的平均价格
{
key:{cat_id:1},
cond:{},
reduce:function(curr , result) {
    result.cnt += 1;
    result.sum += curr.shop_price;
},
initial:{sum:0,cnt:0},
finalize:function(result) {
    result.avg = result.sum/result.cnt;
}
}





#查询每个栏目下的商品数量
db.collection.aggregate();
[
{$group:{_id:"$cat_id",total:{$sum:1}}}
]

#查询goods下有多少条商品,select count(*) from goods
[
{$group:{_id:null,total:{$sum:1}}}
]


#查询每个栏目下 价格大于50元的商品个数
[
{$match:{shop_price:{$gt:50}}},
{$group:{_id:"$cat_id",total:{$sum:1}}}
]


#查询每个栏目下 价格大于50元的商品个数
#并筛选出"满足条件的商品个数" 大于等于3的栏目 
[
{$match:{shop_price:{$gt:50}}},
{$group:{_id:"$cat_id",total:{$sum:1}}},
{$match:{total:{$gte:3}}}
]



#查询每个栏目下的库存量
[
{$group:{_id:"$cat_id" , total:{$sum:"$goods_number"}}},
]


#查询每个栏目下的库存量,并按库存量排序
[
{$group:{_id:"$cat_id" , total:{$sum:"$goods_number"}}},
{$sort:{total:1}}
]


#查询每个栏目下的库存量,并按库存量排序
[
{$group:{_id:"$cat_id" , total:{$sum:"$goods_number"}}},
{$sort:{total:1}},
{$limit:3}
]


#查询每个栏目的商品平均价格,并按平均价格由高到低排序
[
{$group:{_id:"$cat_id" , avg:{$avg:"$shop_price"}}},
{$sort:{avg:-1}}
]


mapReduce 随着"大数据"概念而流行.
其实mapReduce的概念非常简单,
从功能上说,相当于RDBMS的 group 操作



mapReduce的真正强项在哪?
答:在于分布式,当数据非常大时,像google,有N多数据中心,
数据都不在地球的一端,用group力所不及.

group既然不支持分布式,单台服务器的运算能力必然是有限的.

而mapRecuce支持分布式,支持大量的服务器同时工作,
用蛮力来统计.

mapRecuce的工作过程:
map-->映射
reduce->归约


map: 先是把属于同一个组的数据,映射到一个数组上.cat_id-3 [23,2,6,7]
reduce: 把数组(同一组)的数据,进行运算.


用mapReduce计算每个栏目的库存总量


map函数
var map = function() {
    emit(this.cat_id,this.goods_number);
    }


var reduce = function(cat_id,numbers) {
    return Array.sum(numbers);
}


db.goods.mapReduce(map,reduce,{out:'res'});


#用mapReduce计算每个栏目下商品的平均价格

var map = function() {
    emit(this.cat_id,this.shop_price);
    如果想实现 grouby id,name的做法是
    var key =id.':'.name; 获取当前的 联合的key
    }


var reduce = function(cat_id,values) {
    return Array.avg(values);
}

db.goods.mapReduce(map,reduce,{out:'res'});

// mapreduce

var  map = function(){
        var game = this.channel+':'+this.gameid;
        emit(game,this.gameid);
    }
    
var reduce = function(k,v){
       var count = ''; 
        v.forEach(function(val){count += '  '+val}); 
        return count; 
    }    

db.getCollection('test_channel').mapReduce(map,reduce,{out:"res"}) //导出的结果，后进行查询，现在缺憾是无法排除空的选项，有待于完善
db.res.find({})

//mongodb排序
b.COLLECTION_NAME.find().sort({KEY:1})
54) mapreduce 的集中的用法

 
{
  map : function(){
     emit(this.key,value);
  }
  ,reduce:function( key,value){
  
  }
 ,   {
      out: collection, //结果输出到文件集合
      query: document, //查询的条件
      sort: document, //排序的方式
      limit: number  //每次显示的个数
   }

}


//数据导出使用
db.getCollection('loginData').aggregate([
    {$match:{pid:'1390'}},
    {$group:{_id:"$idfa",total:{$sum:1}}},
    {$out:'1390_result'}
])

db.getCollection('loginData').aggregate([
    {$match:{pid:'1474',$and:[{uptime:{$gt:1495814400}},{uptime:{$lt:1496116799}}]}},
    {$group:{_id:"$idfa",total:{$sum:1}}},
    {$out:'1474_result'}
])





var map  = function() {
            if(this.created_at){
                var tim = this.created_at.toISOString().substring(0,10); 
                emit(tim,1);
            }
        }
        
        
 var reduce = function(cat_id,numbers) {
    return Array.sum(numbers);
}

db.getCollection('device_apps_log').mapReduce(map,reduce,{out:"res"})
